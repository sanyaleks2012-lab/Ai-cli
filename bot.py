import os
import re
import sys
import subprocess
from dotenv import load_dotenv
from colorama import Fore, Style, init
import pyttsx3 
from google import genai
from google.genai import types
from google.genai.errors import APIError

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init(autoreset=True, wrap=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_KEY = os.getenv("GEMINI_API_KEY")

if not API_KEY:
    print(Fore.RED + "–û—à–∏–±–∫–∞: –ö–ª—é—á GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Google GenAI
try:
    client = genai.Client(api_key=API_KEY)
except Exception as e:
    print(Fore.RED + f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ Gemini: {e}")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TTS-–¥–≤–∏–∂–∫–∞
tts_engine = None
try:
    tts_engine = pyttsx3.init()
    tts_engine.setProperty('rate', 170)
    # –ü–æ–∏—Å–∫ —Ä—É—Å—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞
    voices = tts_engine.getProperty('voices')
    for voice in voices:
        if 'ru' in voice.id.lower() or 'russian' in voice.id.lower(): 
            tts_engine.setProperty('voice', voice.id)
            break
except Exception:
    pass

# --- –§–£–ù–ö–¶–ò–ò ---

def speak_text(text):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (—Å Termux-API/eSpeak fallback)."""
    if tts_engine:
        print(Fore.MAGENTA + "[–ì–û–í–û–†–ï–ù–ò–ï —á–µ—Ä–µ–∑ pyttsx3/eSpeak...]")
        tts_engine.say(text)
        tts_engine.runAndWait()
        return
    
    # Fallback –¥–ª—è Termux:API
    if os.path.exists('/data/data/com.termux/files/usr/bin/termux-tts-speak'):
        print(Fore.MAGENTA + "[–ì–û–í–û–†–ï–ù–ò–ï —á–µ—Ä–µ–∑ Termux:API...]")
        try:
            subprocess.run(["termux-tts-speak", text], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except Exception:
            pass
        return
        
    print(Fore.YELLOW + "–§—É–Ω–∫—Ü–∏—è 'say' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")


def send_gemini_request(prompt, chat_history):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Gemini API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º genai.Client.
    """
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ genai.Client.chats.create() –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    try:
        chat = client.chats.create(
            model="gemini-2.5-flash",
            history=chat_history # –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        response = chat.send_message(prompt)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        new_history = chat.get_history()
        
        return response.text, new_history

    except APIError as e:
        error_msg = f"–û—à–∏–±–∫–∞ API Gemini (HTTP): –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏ VPN/–ü—Ä–æ–∫—Å–∏. –î–µ—Ç–∞–ª–∏: {e}"
        print(Fore.RED + f"\n{error_msg}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return error_msg, chat_history
        
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ/VPN. –î–µ—Ç–∞–ª–∏: {e}"
        print(Fore.RED + f"\n{error_msg}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI.", chat_history

# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI-–ø–æ–º–æ—â–Ω–∏–∫–∞."""
    # –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ
    chat_history = [] 

    print(Fore.GREEN + Style.BRIGHT + "========================================")
    print(Fore.GREEN + Style.BRIGHT + "  ü§ñ Gemini CLI-–ü–æ–º–æ—â–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω!   ")
    print(Fore.GREEN + Style.BRIGHT + "========================================")
    
    while True:
        try:
            user_input = input(Style.BRIGHT + Fore.BLUE + "you " + Style.RESET_ALL + "> ").strip()
        except (EOFError, KeyboardInterrupt):
            print("\n–í—ã—Ö–æ–¥...")
            break

        if not user_input:
            continue

        if user_input.lower() in ['exit', 'quit']:
            print(Fore.GREEN + "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
            break

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã 'say'
        say_match = re.match(r'^say\s+"(.+)"$', user_input, re.IGNORECASE)
        if say_match:
            speak_text(say_match.group(1))
            continue
            
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini
        ai_response, chat_history = send_gemini_request(user_input, chat_history)
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –ò–ò
        print(Style.BRIGHT + Fore.YELLOW + "AI " + Style.RESET_ALL + f": {ai_response}")

if __name__ == "__main__":
    main()