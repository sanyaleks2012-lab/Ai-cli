import os
import re
import sys
import requests
import subprocess
from dotenv import load_dotenv
from colorama import Fore, Style, init
import pyttsx3 

# --- –ö–û–ù–°–¢–ê–ù–¢–´ API ---
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–æ–º–µ–Ω Google API
GEMINI_API_HOST = "generativelanguage.googleapis.com"
GEMINI_API_URL = f"https://{GEMINI_API_HOST}/v1beta/models/gemini-2.5-flash:generateContent"
# ---------------------

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init(autoreset=True, wrap=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_KEY = os.getenv("GEMINI_API_KEY")

if not API_KEY:
    print(Fore.RED + "–û—à–∏–±–∫–∞: –ö–ª—é—á GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TTS-–¥–≤–∏–∂–∫–∞
tts_engine = None
try:
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ eSpeak-ng (–∏–ª–∏ –∞–Ω–∞–ª–æ–≥) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    tts_engine = pyttsx3.init()
    tts_engine.setProperty('rate', 170)
    # –ü–æ–∏—Å–∫ —Ä—É—Å—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞
    voices = tts_engine.getProperty('voices')
    for voice in voices:
        if 'ru' in voice.id.lower() or 'russian' in voice.id.lower(): 
            tts_engine.setProperty('voice', voice.id)
            break
except Exception:
    # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ TTS –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, pyttsx3 –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –¥–≤–∏–∂–∫–∞)
    pass

# --- –§–£–ù–ö–¶–ò–ò ---

def speak_text(text):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (—Å Termux-API/eSpeak fallback)."""
    if tts_engine:
        print(Fore.MAGENTA + "[–ì–û–í–û–†–ï–ù–ò–ï —á–µ—Ä–µ–∑ pyttsx3/eSpeak...]")
        tts_engine.say(text)
        tts_engine.runAndWait()
        return
    
    # Fallback –¥–ª—è Termux:API
    if os.path.exists('/data/data/com.termux/files/usr/bin/termux-tts-speak'):
        print(Fore.MAGENTA + "[–ì–û–í–û–†–ï–ù–ò–ï —á–µ—Ä–µ–∑ Termux:API...]")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Termux-API TTS (—Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Termux:API –∏ Termux:TTS)
        try:
            subprocess.run(["termux-tts-speak", text], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except Exception:
            pass
        return
        
    print(Fore.YELLOW + "–§—É–Ω–∫—Ü–∏—è 'say' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")


def send_gemini_request(prompt, chat_history):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Gemini API.
    """
    
    new_history = chat_history + [{"role": "user", "parts": [{"text": prompt}]}]
    
    headers = {
        "Content-Type": "application/json",
        "x-api-key": API_KEY 
    }
    
    data = {
        "contents": new_history,
        "config": {"temperature": 0.7}
    }
    
    try:
        response = requests.post(
            GEMINI_API_URL, 
            headers=headers, 
            json=data,
            verify=True, 
            timeout=30 
        )
        response.raise_for_status()

        json_response = response.json()
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
        candidate = json_response.get('candidates', [None])[0]
        if not candidate:
            error_details = json_response.get('error', {}).get('message', 'AI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (–±–µ–∑ –≤–∏–¥–∏–º–æ–π –æ—à–∏–±–∫–∏).')
            return f"–û—à–∏–±–∫–∞ API: {error_details}", chat_history

        ai_response = candidate.get('content', {}).get('parts', [{}])[0].get('text', '–û—à–∏–±–∫–∞: AI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç.')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∏—Å—Ç–æ—Ä–∏—é
        new_history.append(candidate['content'])
        
        return ai_response, new_history

    except requests.exceptions.HTTPError as e:
        error_status = e.response.status_code
        error_msg = f"HTTP –û—à–∏–±–∫–∞ ({error_status}). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á API (401) –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∫–ª—é—á–µ–Ω VPN/–ü—Ä–æ–∫—Å–∏ (403). {e}"
        print(Fore.RED + f"\n{error_msg}")
        return error_msg, chat_history
        
    except requests.exceptions.RequestException as e:
        error_msg = f"–°–µ—Ç–µ–≤–∞—è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google API. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∫–ª—é—á–µ–Ω VPN/–ü—Ä–æ–∫—Å–∏. {e}"
        print(Fore.RED + f"\n{error_msg}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI (–æ—à–∏–±–∫–∞ —Å–µ—Ç–∏/–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞).", chat_history
        
    except Exception as e:
        return f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", chat_history

# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI-–ø–æ–º–æ—â–Ω–∏–∫–∞."""
    chat_history = [] 

    print(Fore.GREEN + Style.BRIGHT + "========================================")
    print(Fore.GREEN + Style.BRIGHT + "  ü§ñ Gemini CLI-–ü–æ–º–æ—â–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω!   ")
    print(Fore.GREEN + Style.BRIGHT + f"  (–ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)   ")
    print(Fore.RED + Style.BRIGHT + "  ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ–æ–±—Ö–æ–¥–∏–º VPN/–ü—Ä–æ–∫—Å–∏! ‚ö†Ô∏è   ")
    print(Fore.GREEN + Style.BRIGHT + "========================================")
    
    while True:
        try:
            user_input = input(Style.BRIGHT + Fore.BLUE + "you " + Style.RESET_ALL + "> ").strip()
        except (EOFError, KeyboardInterrupt):
            print("\n–í—ã—Ö–æ–¥...")
            break

        if not user_input:
            continue

        if user_input.lower() in ['exit', 'quit']:
            print(Fore.GREEN + "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
            break

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã 'say'
        say_match = re.match(r'^say\s+"(.+)"$', user_input, re.IGNORECASE)
        if say_match:
            speak_text(say_match.group(1))
            continue
            
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini
        ai_response, chat_history = send_gemini_request(user_input, chat_history)
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –ò–ò
        print(Style.BRIGHT + Fore.YELLOW + "AI " + Style.RESET_ALL + f": {ai_response}")

if __name__ == "__main__":
    main()